[n.global]
output = nim_cwpack

[n.include]
nim_cwpack/src
nim_cwpack/goodies
nim_cwpack/goodies/basic-contexts
nim_cwpack/example

[n.prepare]
git = "https://github.com/clwi/CWPack.git"

# [cwpack_defines.h]
# preprocess = true
# defines = true
# recurse = true

[cwpack.h]
preprocess = true
defines = true
recurse = true
compile = nim_cwpack/src/cwpack.c

flags = "--stdcall"

[cwpack.nim]
search.bool = "_Bool"
replace.bool = "bool"

search.1 = "cw_pack_context* {.importc: \"cw_pack_context\", header: headercwpack, bycopy.} = object"
replace.1 = ""

search.fix_context = "pack_overflow_handler* = proc (a2: ptr cw_pack_context; a3: culong): cint {.stdcall.}"
append.fix_context = "\n  cw_pack_context* {.importc: \"cw_pack_context\", header: headercwpack, bycopy.} = object"

# search.2 = 'cw_unpack_context* {.importc: "cw_unpack_context", header: headercwpack, bycopy.} = object'
search.2 = "cw_unpack_context* {.importc: \"cw_unpack_context\", header: headercwpack, bycopy.} = object"
replace.2 = ""

search.fix_unpack_context = "  item* {.importc: \"item\".}: cwpack_item"
prepend.fix_unpack_context = "cw_unpack_context* {.importc: \"cw_unpack_context\", header: headercwpack, bycopy.} = object\n  "

search.a = "int8_t"
replace.a = "int8"

search.u32 = "uint32_t"
replace.u32 = "uint32"

search.b = "int64_t"
replace.b = "int64"

[basic-contexts/basic_contexts.h]
preprocess = true
defines = true
recurse = true

compile = nim_cwpack/goodies/basic-contexts/basic_contexts.c

[basic_contexts.nim]
search = "_Bool"
replace = "bool"

search.a = "int8_t"
replace.a = "int8"

search.u32 = "uint32_t"
replace.u32 = "uint32"

search.b = "int64_t"
replace.b = "int64"

[item.h]
preprocess = true
defines = true
recurse = true

search.a = "typedef enum"
prepend.a = "#include <stdio.h>\n"

compile = nim_cwpack/example/item.c

# [cwpack_util.h]
# preprocess = true
# defines = true
# recurse = true
# compile = nim_cwpack/src/cwpack_util.c

# [cwpack_util.nim]
# search.a = "int8_t"
# replace.a = "int8"

# search.b = "int64_t"
# replace.b = "int64"

# search.u32 = "int32_t"
# replace.u32 = "int32"

# search.u16 = "int16_t"
# replace.u16 = "int16"

